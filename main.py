# payout_bot.py
import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY', 'YOUR_NOWPAYMENTS_API_KEY_HERE')
if NOWPAYMENTS_API_KEY == 'YOUR_NOWPAYMENTS_API_KEY_HERE':
    logger.warning("NOWPAYMENTS_API_KEY –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

WEBHOOK_URL = os.getenv('WEBHOOK_URL', 'https://your-app-url.onrender.com') # –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è IPN, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–ø–ª–∞—Ç–∞.txt)
AVAILABLE_CURRENCIES = {
    "USDT (Solana)": "usdtsol",
    "USDT (TRC20)": "usdttrc20",
    "ETH": "eth",
    "USDT (Arbitrum)": "usdtarb",
    "USDT (Polygon)": "usdtmatic",
    "USDT (TON)": "usdtton",
    "AVAX (C-Chain)": "avax",
    "APTOS (APT)": "apt"
}

# –ö—É—Ä—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ UAH –≤ USD
EXCHANGE_RATE_UAH_TO_USD = 41.26

# ID –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
OWNER_ID_1 = 7106925462
OWNER_ID_2 = 6279578957
OWNER_IDS = {OWNER_ID_1, OWNER_ID_2}


def convert_uah_to_usd(uah_amount: float) -> float:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –∏–∑ UAH –≤ USD –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É."""
    if uah_amount <= 0:
        return 0.0
    return round(uah_amount / EXCHANGE_RATE_UAH_TO_USD, 2)


async def payout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payout –¥–ª—è –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π"""
    user = update.effective_user
    user_id = user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
    if user_id not in OWNER_IDS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    if len(context.args) < 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: `/payout <user_id> <amount_in_uah>`\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: `/payout 123456789 500`",
            parse_mode='Markdown'
        )
        return

    try:
        target_user_id = int(context.args[0])
        uah_amount = float(context.args[1])
        if uah_amount <= 0:
            raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
    except ValueError as e:
        await update.message.reply_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å—É–º–∏: {e}")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ USD
    usd_amount = convert_uah_to_usd(uah_amount)
    if usd_amount <= 0:
        await update.message.reply_text("‚ùå –°—É–º–∞ –≤ USD –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data['payout_target_user_id'] = target_user_id
    context.user_data['payout_amount_uah'] = uah_amount
    context.user_data['payout_amount_usd'] = usd_amount

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é", callback_data='payout_card')],
        [InlineKeyboardButton("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='payout_crypto')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"üí≥ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_user_id}`.\n"
        f"–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏:",
        parse_mode='Markdown',
        reply_markup=reply_markup
    )


async def payout_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å payout"""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º
    if user_id not in OWNER_IDS:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    target_user_id = context.user_data.get('payout_target_user_id')
    uah_amount = context.user_data.get('payout_amount_uah')
    usd_amount = context.user_data.get('payout_amount_usd')

    if not target_user_id or not uah_amount or not usd_amount:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂ –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    # --- –õ–æ–≥–∏–∫–∞ –¥–ª—è /payout ---
    # - –û—Ç–º–µ–Ω–∞ -
    if data == 'payout_cancel':
        await query.edit_message_text("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data.pop('payout_target_user_id', None)
        context.user_data.pop('payout_amount_uah', None)
        context.user_data.pop('payout_amount_usd', None)
        context.user_data.pop('payout_nowpayments_invoice_id', None)
        return

    # - –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ–π -
    elif data == 'payout_card':
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data='payout_manual_payment_confirmed')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –∫–∞—Ä—Ç–∫–æ—é.\n"
            f"(–¢—É—Ç –±—É–¥—É—Ç—å —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏)\n"
            f"–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ'.",
            reply_markup=reply_markup
        )
        # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    # - –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é -
    elif data == 'payout_crypto':
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        keyboard = []
        for currency_name, currency_code in AVAILABLE_CURRENCIES.items():
            keyboard.append([InlineKeyboardButton(currency_name, callback_data=f'payout_crypto_{currency_code}')])
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"ü™ô –û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$):",
            reply_markup=reply_markup
        )
        # context.user_data['awaiting_payout_crypto_currency_selection'] = True # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã -
    elif data.startswith('payout_crypto_'):
        pay_currency = data.split('_')[2]  # e.g., 'usdttrc20'
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        currency_name = next((name for name, code in AVAILABLE_CURRENCIES.items() if code == pay_currency), pay_currency)
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ NOWPayments
            headers = {
                'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                'Content-Type': 'application/json'
            }
            payload = {
                "price_amount": usd_amount,
                "price_currency": "usd",
                "pay_currency": pay_currency,
                "ipn_callback_url": f"{WEBHOOK_URL}/nowpayments_ipn",  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è webhook)
                "order_id": f"payout_{user_id}_{target_user_id}_{int(time.time())}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                "order_description": f"–í–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_user_id}"
            }
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ NOWPayments: {payload}")
            response = requests.post("https://api.nowpayments.io/v1/invoice", json=payload, headers=headers)
            logger.info(f"–û—Ç–≤–µ—Ç NOWPayments: {response.status_code}, {response.text}")
            response.raise_for_status()
            invoice = response.json()
            pay_url = invoice.get("invoice_url", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
            invoice_id = invoice.get("invoice_id", "–ù–µ–≤—ñ–¥–æ–º–∏–π ID —Ä–∞—Ö—É–Ω–∫—É")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∏–Ω–≤–æ–π—Å–∞
            context.user_data['payout_nowpayments_invoice_id'] = invoice_id

            keyboard = [
                [InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏", url=pay_url)],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data='payout_check_payment_status')],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"ü™ô –í–∞–º –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ {uah_amount}‚Ç¥ ({usd_amount}$) –≤ {currency_name}:\n"
                         f"{pay_url}\n"
                         f"ID —Ä–∞—Ö—É–Ω–∫—É: `{invoice_id}`\n"
                         f"–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–¥—ñ–π—Å–Ω—ñ—Ç—å –æ–ø–ª–∞—Ç—É.",
                    parse_mode='Markdown'
                )
                await query.edit_message_text(
                    f"‚úÖ –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É `{target_user_id}`.\n"
                    f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {target_user_id}: {e}")
                await query.edit_message_text(
                    f"‚ùå –†–∞—Ö—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}\n"
                    f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {pay_url}"
                )
        except requests.exceptions.RequestException as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ NOWPayments –¥–ª—è payout: {e}")
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ —Å–µ—Ä–≤—ñ—Å–æ–º –æ–ø–ª–∞—Ç–∏: {e}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É NOWPayments –¥–ª—è payout: {e}")
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {e}")

    # - –†—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ -
    elif data == 'payout_manual_payment_confirmed':
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ë–î
        await query.edit_message_text(
            "‚úÖ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –≤—Ä—É—á–Ω—É.\n"
            "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
        )
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        context.user_data.pop('payout_target_user_id', None)
        context.user_data.pop('payout_amount_uah', None)
        context.user_data.pop('payout_amount_usd', None)
        context.user_data.pop('payout_nowpayments_invoice_id', None)

    # - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç–∏ -
    elif data == 'payout_check_payment_status':
        invoice_id = context.user_data.get('payout_nowpayments_invoice_id')
        if not invoice_id:
            await query.edit_message_text("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.")
            return
        try:
            headers = {
                'Authorization': f'Bearer {NOWPAYMENTS_API_KEY}', # –ò—Å–ø–æ–ª—å–∑—É–µ–º Bearer —Ç–æ–∫–µ–Ω
                'Content-Type': 'application/json'
            }
            response = requests.get(f"https://api.nowpayments.io/v1/invoice/{invoice_id}", headers=headers)
            response.raise_for_status()
            status_data = response.json()
            payment_status = status_data.get('payment_status', 'unknown')

            if payment_status == 'finished':
                await query.edit_message_text(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∞!\n"
                    "–Ü–Ω—Ñ–æ—Ä–º—É–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó."
                )
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                context.user_data.pop('payout_target_user_id', None)
                context.user_data.pop('payout_amount_uah', None)
                context.user_data.pop('payout_amount_usd', None)
                context.user_data.pop('payout_nowpayments_invoice_id', None)
            elif payment_status in ['waiting', 'confirming', 'confirmed']:
                keyboard = [
                    [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —â–µ —Ä–∞–∑", callback_data='payout_check_payment_status')],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚è≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏: `{payment_status}`. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–µ —Ä–∞–∑.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:  # cancelled, expired, partially_paid, etc.
                keyboard = [
                    [InlineKeyboardButton("üí≥ –Ü–Ω—à–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç–∏", callback_data='payout_cancel')], # –ü—Ä–æ—Å—Ç–æ –æ—Ç–º–µ–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='payout_cancel')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –∞–±–æ –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: `{payment_status}`.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É NOWPayments –¥–ª—è payout: {e}")
            await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç–∏: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ payout"""
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã—Ö–æ–¥.")
        return

    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è payout
    application.add_handler(CommandHandler("payout", payout_command))
    application.add_handler(CallbackQueryHandler(payout_callback_handler, pattern='^payout_'))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è /payout...")
    application.run_polling()


if __name__ == '__main__':
    main()
